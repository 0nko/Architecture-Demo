apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'

android {

    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 24

        applicationId "com.ondrejruttkay.architecturedemo"
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {

    // Support libs
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"

    // Rx
    compile "io.reactivex:rxjava:$rootProject.rxJavaVersion"
    compile "io.reactivex:rxandroid:$rootProject.rxAndroidVersion"
    compile "com.jakewharton.rxbinding:rxbinding:$rootProject.rxBindingVersion"

    // Utils
    compile "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Leak canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"

    // Dagger
    apt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    compile "com.google.dagger:dagger:$rootProject.daggerVersion"
    provided "org.glassfish:javax.annotation:$rootProject.annotationsVersion"

    // Otto
    compile "com.squareup:otto:$rootProject.ottoVersion"

    // Picasso
    compile "com.squareup.picasso:picasso:$rootProject.picassoVersion"

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.runnerVersion"
    androidTestApt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}